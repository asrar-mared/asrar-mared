# .github/workflows/security-scan.yml
# 🔐 Security Scanning - أسرار المارد الرقمي للأمن السيبراني

name: 🔐 Security Scanning & Vulnerability Assessment

on:
  push:
    branches: 
      - main
      - develop
      - "security/**"
    paths:
      - "**/*.js"
      - "**/*.ts"
      - "**/*.py"
      - "**/*.go"
      - "**/*.java"
      - "package*.json"
      - "requirements.txt"
      - "Dockerfile"
      - ".github/workflows/security-scan.yml"
  pull_request:
    branches: 
      - main
      - develop
    types: [opened, synchronize, reopened]
  schedule:
    # فحص يومي الساعة 2 صباحاً بتوقيت القاهرة
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'نوع الفحص'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - deep

# منع تشغيل متزامن
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: false  # لا نلغي فحوصات الأمان

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write

env:
  SCAN_SEVERITY: "CRITICAL,HIGH,MEDIUM"
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20.x"
  GO_VERSION: "1.21"

jobs:
  # ===================================
  # الفحص الأولي السريع
  # ===================================
  quick-security-check:
    name: ⚡ Quick Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Scan for Secrets (TruffleHog)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified --fail

      - name: 🔐 Detect Hardcoded Secrets (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 📋 Check for Sensitive Files
        run: |
          echo "🔍 Checking for sensitive files..."
          SENSITIVE_FILES=(
            "*.pem"
            "*.key"
            "*.p12"
            "*.pfx"
            "*.jks"
            "*.keystore"
            "*.env"
            "*.env.*"
            "*id_rsa*"
            "*id_ed25519*"
            "*.gpg"
            "*.asc"
            "credentials.json"
            "secrets.json"
          )
          
          FOUND=0
          for pattern in "${SENSITIVE_FILES[@]}"; do
            if find . -name "$pattern" -not -path "*/node_modules/*" -not -path "*/.git/*" | grep -q .; then
              echo "⚠️ Found potentially sensitive files matching: $pattern"
              find . -name "$pattern" -not -path "*/node_modules/*" -not -path "*/.git/*"
              FOUND=1
            fi
          done
          
          if [ $FOUND -eq 1 ]; then
            echo "❌ Sensitive files detected!"
            exit 1
          else
            echo "✅ No sensitive files found"
          fi

  # ===================================
  # فحص التبعيات والثغرات
  # ===================================
  dependency-scanning:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: quick-security-check
    timeout-minutes: 20
    
    strategy:
      matrix:
        scanner: [npm-audit, snyk, trivy]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # ===== NPM Audit =====
      - name: 🟢 Setup Node.js
        if: matrix.scanner == 'npm-audit'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 NPM Audit
        if: matrix.scanner == 'npm-audit'
        run: |
          if [ -f "package.json" ]; then
            echo "🔍 Running npm audit..."
            npm audit --audit-level=moderate --json > npm-audit.json || true
            
            # عرض النتائج
            if [ -f "npm-audit.json" ]; then
              cat npm-audit.json | jq '.vulnerabilities' || cat npm-audit.json
              
              # فحص الثغرات الحرجة
              CRITICAL=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
              HIGH=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
              
              echo "🔴 Critical: $CRITICAL"
              echo "🟠 High: $HIGH"
              
              if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
                echo "❌ Critical or High vulnerabilities found!"
                exit 1
              fi
            fi
          else
            echo "⚠️ No package.json found"
          fi

      # ===== Snyk =====
      - name: 🛡️ Snyk Security Scan
        if: matrix.scanner == 'snyk'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: 📤 Upload Snyk Report
        if: matrix.scanner == 'snyk' && always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-security-report
          path: snyk-report.json
          retention-days: 30

      # ===== Trivy =====
      - name: 🐳 Trivy Vulnerability Scanner
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: 📤 Upload Trivy SARIF
        if: matrix.scanner == 'trivy' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'

  # ===================================
  # فحص Python (إذا وُجد)
  # ===================================
  python-security:
    name: 🐍 Python Security Scan
    runs-on: ubuntu-latest
    needs: quick-security-check
    timeout-minutes: 15
    if: hashFiles('requirements.txt', 'setup.py', 'Pipfile') != ''
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit

      - name: 🔍 Safety Check (Known Vulnerabilities)
        run: |
          if [ -f "requirements.txt" ]; then
            echo "🔍 Running Safety check..."
            safety check --file requirements.txt --json > safety-report.json || true
            cat safety-report.json
          fi

      - name: 🔒 Bandit (Security Issues in Code)
        run: |
          if find . -name "*.py" -not -path "*/venv/*" | grep -q .; then
            echo "🔍 Running Bandit..."
            bandit -r . -f json -o bandit-report.json || true
            cat bandit-report.json
          fi

      - name: 🛡️ pip-audit
        run: |
          if [ -f "requirements.txt" ]; then
            echo "🔍 Running pip-audit..."
            pip-audit -r requirements.txt --format json > pip-audit.json || true
            cat pip-audit.json
          fi

      - name: 📤 Upload Python Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            safety-report.json
            bandit-report.json
            pip-audit.json
          retention-days: 30

  # ===================================
  # فحص Docker (إذا وُجد)
  # ===================================
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    needs: quick-security-check
    timeout-minutes: 15
    if: hashFiles('Dockerfile', 'docker-compose.yml') != ''
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Trivy Docker Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-docker.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 🔍 Hadolint Dockerfile Linting
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint.sarif
          no-fail: true

      - name: 📤 Upload Docker Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            trivy-docker.sarif
            hadolint.sarif
          category: 'docker-security'

  # ===================================
  # OWASP Dependency Check
  # ===================================
  owasp-dependency-check:
    name: 🛡️ OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: quick-security-check
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'asrar-mared'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            --suppression suppression.xml

      - name: 📤 Upload OWASP Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: reports/
          retention-days: 30

  # ===================================
  # SAST (Static Application Security Testing)
  # ===================================
  sast-analysis:
    name: 🔬 SAST Analysis
    runs-on: ubuntu-latest
    needs: dependency-scanning
    timeout-minutes: 25
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/cwe-top-25
            p/ci
          generateSarif: true

      - name: 📤 Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: 'semgrep'

  # ===================================
  # Container Image Scanning
  # ===================================
  container-scan:
    name: 📦 Container Image Security
    runs-on: ubuntu-latest
    needs: docker-security
    if: hashFiles('Dockerfile') != ''
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Build Docker Image
        run: |
          docker build -t asrar-mared:test .

      - name: 🔍 Grype Vulnerability Scan
        uses: anchore/scan-action@v3
        with:
          image: "asrar-mared:test"
          severity-cutoff: medium
          fail-build: true
          output-format: sarif

      - name: 📤 Upload Grype Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: 'grype-container'

  # ===================================
  # License Compliance Check
  # ===================================
  license-check:
    name: 📜 License Compliance
    runs-on: ubuntu-latest
    needs: quick-security-check
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Check Licenses
        uses: licensebat/licensebat-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # ===================================
  # تقرير الأمان الشامل
  # ===================================
  security-report:
    name: 📊 Security Report Summary
    runs-on: ubuntu-latest
    needs: 
      - dependency-scanning
      - python-security
      - docker-security
      - owasp-dependency-check
      - sast-analysis
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: 📊 Generate Summary
        run: |
          echo "# 🔐 تقرير الأمان الشامل" > security-summary.md
          echo "" >> security-summary.md
          echo "**التاريخ**: $(date '+%Y-%m-%d %H:%M:%S')" >> security-summary.md
          echo "**المستودع**: ${{ github.repository }}" >> security-summary.md
          echo "**الفرع**: ${{ github.ref_name }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 📋 نتائج الفحوصات" >> security-summary.md
          echo "" >> security-summary.md
          
          # إضافة نتائج الفحوصات
          if [ -d "security-reports" ]; then
            find security-reports -name "*.json" -o -name "*.sarif" | while read file; do
              echo "- 📄 $(basename $file)" >> security-summary.md
            done
          fi
          
          echo "" >> security-summary.md
          echo "## ✅ الحالة النهائية" >> security-summary.md
          echo "جميع الفحوصات الأمنية قد اكتملت بنجاح!" >> security-summary.md
          
          cat security-summary.md

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: 📤 Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

  # ===================================
  # إشعار في حالة الفشل
  # ===================================
  notify-security-failure:
    name: 🚨 Security Alert
    runs-on: ubuntu-latest
    needs: 
      - dependency-scanning
      - python-security
      - docker-security
      - owasp-dependency-check
      - sast-analysis
    if: failure()
    
    steps:
      - name: 🚨 Create Security Issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 تنبيه أمني: فشل في الفحص الأمني',
              body: `## 🚨 تحذير أمني
              
              فشلت عملية الفحص الأمني في:
              - **الفرع**: ${context.ref}
              - **Commit**: ${context.sha}
              - **التاريخ**: ${new Date().toISOString()}
              
              يرجى مراجعة السجلات والتقارير فوراً!
              
              ### 🔗 الروابط
              - [سجلات Workflow](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - [Commit](${context.payload.repository.html_url}/commit/${context.sha})
              
              @asrar-mared يرجى التحقق من هذا فوراً!`,
              labels: ['security', 'critical', 'automated']
            });

      - name: 📧 Send Email Alert
        if: secrets.EMAIL_PASSWORD != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.proton.me
          server_port: 587
          username: nike49424@proton.me
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '🚨 تنبيه أمني عاجل - asrar-mared'
          body: |
            تحذير أمني: تم اكتشاف مشاكل أمنية في المستودع asrar-mared
            
            يرجى التحقق من GitHub Actions فوراً!
          to: nike49424@proton.me
          from: Security Bot <nike49424@proton.me>
