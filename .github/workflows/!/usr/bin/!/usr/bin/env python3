#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
🔥💀 الفصل الثالث: NotPetya - الدمار الرقمي الذي أعاد تعريف الحرب السيبرانية 💀🔥
📚 كتاب: أسرار المارد الرقمي للأمن السيبراني
👨‍💻 للمطورين والباحثين الأمنيين فقط - أغراض تعليمية بحتة
⚠️ تحذير: هذا السكريبت للتعليم فقط - استخدامه بشكل ضار جريمة!
"""

import os
import sys
import time
import hashlib
from datetime import datetime
from typing import List, Dict

# 🎨 ألوان الطباعة في الترمنال
class Colors:
    RED = '\033[91m' 
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

# 🎭 واجهة النظام
def print_banner():
    """طباعة واجهة البرنامج التعليمية"""
    banner = f"""
    {Colors.RED}{Colors.BOLD}
    ╔═══════════════════════════════════════════════════════════╗
    ║  🔥💀 NotPetya - محاكي تعليمي للأمن السيبراني 💀🔥     ║
    ║  📖 الفصل الثالث: الدمار الرقمي                        ║
    ║  🎓 للأغراض التعليمية والبحثية فقط                     ║
    ╚═══════════════════════════════════════════════════════════╝
    {Colors.END}
    """
    print(banner)

# 📊 نظام محاكاة تحليل الهجوم
class NotPetyaSimulator:
    """
    🔬 محاكي تعليمي لفهم آليات هجوم NotPetya
    ⚠️ هذا الكود للتعليم فقط ولا يحتوي على أي وظائف ضارة
    """
    
    def __init__(self):
        self.attack_vectors: List[str] = []
        self.infection_chain: List[Dict] = []
        self.defense_measures: List[str] = []
        
    def analyze_infection_vector(self):
        """🦠 تحليل نقاط الدخول التي استخدمها NotPetya"""
        print(f"\n{Colors.CYAN}{'='*60}")
        print(f"🔍 المرحلة 1: تحليل نقاط الدخول (Infection Vectors)")
        print(f"{'='*60}{Colors.END}\n")
        
        vectors = [
            {
                "emoji": "📊",
                "name": "M.E.Doc Backdoor",
                "description": "برنامج محاسبة أوكراني - النقطة صفر للهجوم",
                "danger": "🔴 عالي جداً",
                "details": "تم اختراق برنامج M.E.Doc وإدخال باب خلفي في التحديثات"
            },
            {
                "emoji": "🌐",
                "name": "EternalBlue Exploit",
                "description": "ثغرة SMBv1 المسربة من NSA",
                "danger": "🔴 عالي جداً",
                "details": "نفس الثغرة المستخدمة في WannaCry - CVE-2017-0144"
            },
            {
                "emoji": "🔑",
                "name": "Mimikatz Credential Theft",
                "description": "سرقة كلمات المرور من الذاكرة",
                "danger": "🟠 عالي",
                "details": "استخراج بيانات الاعتماد لنشر الهجوم أفقياً"
            },
            {
                "emoji": "⚙️",
                "name": "PsExec & WMIC",
                "description": "أدوات إدارة Windows الشرعية",
                "danger": "🟡 متوسط",
                "details": "استخدام أدوات Microsoft الرسمية للانتشار"
            }
        ]
        
        for i, vector in enumerate(vectors, 1):
            print(f"{vector['emoji']} {Colors.BOLD}{i}. {vector['name']}{Colors.END}")
            print(f"   📝 الوصف: {vector['description']}")
            print(f"   ⚠️  مستوى الخطر: {vector['danger']}")
            print(f"   💡 التفاصيل: {vector['details']}")
            print()
            self.attack_vectors.append(vector['name'])
            time.sleep(0.5)
    
    def simulate_attack_chain(self):
        """⛓️ محاكاة سلسلة الهجوم خطوة بخطوة"""
        print(f"\n{Colors.YELLOW}{'='*60}")
        print(f"⛓️  المرحلة 2: سلسلة الهجوم (Kill Chain)")
        print(f"{'='*60}{Colors.END}\n")
        
        attack_steps = [
            {
                "step": 1,
                "emoji": "🎯",
                "phase": "Initial Compromise",
                "action": "اختراق M.E.Doc وحقن التحديث الخبيث",
                "timestamp": "2017-06-27 10:30 UTC",
                "impact": "🔴 30,000+ نظام مصاب في أوكرانيا"
            },
            {
                "step": 2,
                "emoji": "💉",
                "phase": "Execution",
                "action": "تشغيل DLL خبيث عبر rundll32.exe",
                "timestamp": "2017-06-27 10:35 UTC",
                "impact": "🟠 بدء الانتشار التلقائي"
            },
            {
                "step": 3,
                "emoji": "🔐",
                "phase": "Credential Dumping",
                "action": "استخدام Mimikatz لسرقة كلمات المرور",
                "timestamp": "2017-06-27 10:40 UTC",
                "impact": "🟡 الحصول على صلاحيات المسؤول"
            },
            {
                "step": 4,
                "emoji": "🌊",
                "phase": "Lateral Movement",
                "action": "الانتشار عبر الشبكة باستخدام EternalBlue + PsExec",
                "timestamp": "2017-06-27 10:45 UTC",
                "impact": "🔴 إصابة الشبكات المؤسسية بالكامل"
            },
            {
                "step": 5,
                "emoji": "💣",
                "phase": "Destruction",
                "action": "تشفير MBR وإتلاف البيانات بشكل دائم",
                "timestamp": "2017-06-27 11:00 UTC",
                "impact": "💀 خسائر: 10 مليار دولار عالمياً"
            },
            {
                "step": 6,
                "emoji": "🌍",
                "phase": "Global Spread",
                "action": "الانتشار خارج أوكرانيا عبر الشركات متعددة الجنسيات",
                "timestamp": "2017-06-27 12:00 UTC",
                "impact": "🔴 Maersk, Merck, FedEx, WPP - آلاف الشركات"
            }
        ]
        
        for step in attack_steps:
            print(f"{step['emoji']} {Colors.BOLD}الخطوة {step['step']}: {step['phase']}{Colors.END}")
            print(f"   ⏰ الوقت: {step['timestamp']}")
            print(f"   🎬 الإجراء: {step['action']}")
            print(f"   💥 التأثير: {step['impact']}")
            print(f"   {Colors.GREEN}{'▓' * (step['step'] * 10)}{Colors.END}")
            print()
            
            self.infection_chain.append(step)
            time.sleep(0.7)
    
    def analyze_destruction_mechanism(self):
        """💀 تحليل آلية التدمير المستخدمة"""
        print(f"\n{Colors.RED}{'='*60}")
        print(f"💀 المرحلة 3: آلية التدمير (Destruction Mechanism)")
        print(f"{'='*60}{Colors.END}\n")
        
        destruction_details = [
            {
                "emoji": "🎭",
                "component": "التمويه الخادع",
                "description": "يتظاهر بأنه برمجية فدية Petya",
                "reality": "⚠️ في الحقيقة: أداة تدمير دائمة بدون مفتاح فك تشفير",
                "code": "fake_bitcoin_address = '1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX'"
            },
            {
                "emoji": "💾",
                "component": "تدمير MBR",
                "description": "الكتابة فوق Master Boot Record",
                "reality": "⚠️ استحالة الإقلاع من القرص الصلب",
                "code": "overwrite_mbr_with_fake_ransom_note()"
            },
            {
                "emoji": "🔐",
                "component": "تشفير وهمي",
                "description": "استخدام Salsa20 لتشفير الملفات",
                "reality": "⚠️ المفاتيح مدمرة - لا يمكن الاستعادة حتى بالدفع",
                "code": "destroy_encryption_keys_permanently()"
            },
            {
                "emoji": "⏱️",
                "component": "مؤقت إعادة التشغيل",
                "description": "إعادة تشغيل النظام بعد ساعة",
                "reality": "⚠️ لإكمال التدمير وعرض رسالة الفدية الوهمية",
                "code": "schedule_reboot_after_1_hour()"
            }
        ]
        
        for detail in destruction_details:
            print(f"{detail['emoji']} {Colors.BOLD}{detail['component']}{Colors.END}")
            print(f"   📄 الظاهر: {detail['description']}")
            print(f"   {detail['reality']}")
            print(f"   💻 كود توضيحي: {Colors.CYAN}{detail['code']}{Colors.END}")
            print()
            time.sleep(0.5)
    
    def calculate_impact(self):
        """📊 حساب التأثير العالمي"""
        print(f"\n{Colors.PURPLE}{'='*60}")
        print(f"📊 المرحلة 4: التأثير العالمي (Global Impact)")
        print(f"{'='*60}{Colors.END}\n")
        
        victims = [
            {"emoji": "🇺🇦", "entity": "أوكرانيا", "impact": "البنوك، الطاقة، المطارات، تشيرنوبيل", "loss": "$500M+"},
            {"emoji": "🚢", "entity": "Maersk", "impact": "76 موانئ، 800 سفينة متوقفة", "loss": "$300M"},
            {"emoji": "💊", "entity": "Merck", "impact": "توقف الإنتاج الدوائي", "loss": "$870M"},
            {"emoji": "📦", "entity": "FedEx (TNT)", "impact": "توقف الشحن العالمي", "loss": "$400M"},
            {"emoji": "🏭", "entity": "Saint-Gobain", "impact": "إغلاق المصانع الأوروبية", "loss": "$384M"},
            {"emoji": "🍫", "entity": "Mondelez", "impact": "تعطل خطوط الإنتاج", "loss": "$188M"},
            {"emoji": "🏥", "entity": "Heritage Valley", "impact": "تعطل أنظمة المستشفيات", "loss": "$10M+"},
            {"emoji": "🌍", "entity": "إجمالي عالمي", "impact": "65+ دولة، آلاف الشركات", "loss": "$10B+"}
        ]
        
        total_loss = 0
        
        for victim in victims:
            loss_value = float(victim['loss'].replace('$', '').replace('M', '').replace('B', '000').replace('+', ''))
            if 'B' in victim['loss']:
                loss_value *= 1000
            total_loss += loss_value
            
            print(f"{victim['emoji']} {Colors.BOLD}{victim['entity']}{Colors.END}")
            print(f"   💥 التأثير: {victim['impact']}")
            print(f"   💰 الخسائر: {Colors.RED}{victim['loss']}{Colors.END}")
            print()
            time.sleep(0.4)
        
        print(f"{Colors.RED}{Colors.BOLD}┌{'─'*58}┐")
        print(f"│ {'🔥 أكبر هجوم سيبراني مدمر في التاريخ':^58} │")
        print(f"│ {'إجمالي الخسائر المقدرة: $10+ مليار دولار':^58} │")
        print(f"└{'─'*58}┘{Colors.END}\n")
    
    def show_defense_strategies(self):
        """🛡️ عرض استراتيجيات الحماية"""
        print(f"\n{Colors.GREEN}{'='*60}")
        print(f"🛡️  المرحلة 5: استراتيجيات الحماية (Defense Strategies)")
        print(f"{'='*60}{Colors.END}\n")
        
        defenses = [
            {
                "emoji": "🔄",
                "strategy": "تحديثات الأمان الفورية",
                "actions": [
                    "تطبيق MS17-010 (EternalBlue patch) فوراً",
                    "تعطيل SMBv1 في جميع الأنظمة",
                    "مراقبة التحديثات من الموردين الموثوقين فقط"
                ],
                "priority": "🔴 حرج"
            },
            {
                "emoji": "🔐",
                "strategy": "إدارة الصلاحيات",
                "actions": [
                    "تطبيق مبدأ الصلاحيات الأدنى (Least Privilege)",
                    "استخدام حسابات منفصلة للمسؤولين",
                    "تفعيل Multi-Factor Authentication (MFA)"
                ],
                "priority": "🔴 حرج"
            },
            {
                "emoji": "🌐",
                "strategy": "عزل الشبكات",
                "actions": [
                    "تقسيم الشبكة (Network Segmentation)",
                    "عزل الأنظمة الحرجة",
                    "مراقبة حركة المرور الجانبية"
                ],
                "priority": "🟠 عالي"
            },
            {
                "emoji": "💾",
                "strategy": "النسخ الاحتياطي",
                "actions": [
                    "نسخ احتياطي يومي غير متصل بالشبكة (Air-gapped)",
                    "اختبار استعادة البيانات بانتظام",
                    "تطبيق قاعدة 3-2-1 للنسخ الاحتياطي"
                ],
                "priority": "🔴 حرج"
            },
            {
                "emoji": "👁️",
                "strategy": "المراقبة والكشف",
                "actions": [
                    "نشر EDR (Endpoint Detection & Response)",
                    "مراقبة استخدام Mimikatz و PsExec",
                    "تحليل السلوك الشاذ في الشبكة"
                ],
                "priority": "🟠 عالي"
            },
            {
                "emoji": "📋",
                "strategy": "خطة الاستجابة للحوادث",
                "actions": [
                    "إنشاء فريق CERT جاهز",
                    "تدريبات محاكاة الهجمات",
                    "تحديد الأصول الحرجة مسبقاً"
                ],
                "priority": "🟡 متوسط"
            }
        ]
        
        for i, defense in enumerate(defenses, 1):
            print(f"{defense['emoji']} {Colors.BOLD}{i}. {defense['strategy']}{Colors.END}")
            print(f"   🎯 الأولوية: {defense['priority']}")
            print(f"   ✅ الإجراءات المطلوبة:")
            for action in defense['actions']:
                print(f"      • {action}")
            print()
            self.defense_measures.append(defense['strategy'])
            time.sleep(0.5)
    
    def show_attribution_analysis(self):
        """🕵️ تحليل الإسناد والجهة المهاجمة"""
        print(f"\n{Colors.CYAN}{'='*60}")
        print(f"🕵️  المرحلة 6: تحليل الإسناد (Attribution Analysis)")
        print(f"{'='*60}{Colors.END}\n")
        
        print(f"{Colors.BOLD}🔍 التحليل الجنائي الرقمي:{Colors.END}\n")
        
        attribution = [
            {
                "evidence": "🎯 الهدف الأساسي",
                "finding": "أوكرانيا (80% من الضحايا الأوائل)",
                "conclusion": "دوافع جيوسياسية واضحة"
            },
            {
                "evidence": "💻 الكود المصدري",
                "finding": "أوجه تشابه مع هجمات سابقة على أوكرانيا",
                "conclusion": "نفس الجهة المهاجمة لـ BlackEnergy وKillDisk"
            },
            {
                "evidence": "⏰ التوقيت",
                "finding": "يوم الدستور الأوكراني، ذكرى الحرب",
                "conclusion": "رمزية سياسية مقصودة"
            },
            {
                "evidence": "🎭 عدم وجود هدف مالي",
                "finding": "عنوان Bitcoin وهمي، لا طريقة للاستعادة",
                "conclusion": "التدمير الكامل هو الهدف، ليس المال"
            }
        ]
        
        for item in attribution:
            print(f"{item['evidence']}: {item['finding']}")
            print(f"   💡 الاستنتاج: {Colors.YELLOW}{item['conclusion']}{Colors.END}\n")
            time.sleep(0.4)
        
        print(f"\n{Colors.RED}{Colors.BOLD}🚨 الإسناد الرسمي:{Colors.END}")
        print(f"{Colors.RED}   الولايات المتحدة والمملكة المتحدة وأستراليا نسبت الهجوم")
        print(f"   رسمياً إلى وحدة الاستخبارات العسكرية الروسية (GRU)")
        print(f"   الاسم الكودي: Sandworm / Telebots / Voodoo Bear{Colors.END}\n")
    
    def generate_report(self):
        """📄 إنشاء تقرير شامل"""
        print(f"\n{Colors.BLUE}{'='*60}")
        print(f"📄 إنشاء التقرير النهائي...")
        print(f"{'='*60}{Colors.END}\n")
        
        report = f"""
🔥💀 تقرير تحليل NotPetya - الدمار الرقمي 💀🔥
{'='*60}

📅 تاريخ التقرير: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

📊 ملخص تنفيذي:
   • نوع الهجوم: Wiper متنكر في زي Ransomware
   • تاريخ الهجوم: 27 يونيو 2017
   • الخسائر المقدرة: +$10 مليار دولار
   • عدد الدول المتأثرة: +65 دولة
   • الهدف الأساسي: أوكرانيا والبنية التحتية الحرجة

🎯 نقاط الدخول المستخدمة:
"""
        for i, vector in enumerate(self.attack_vectors, 1):
            report += f"   {i}. {vector}\n"
        
        report += f"""
⛓️  مراحل سلسلة الهجوم: {len(self.infection_chain)} مرحلة
🛡️  استراتيجيات الحماية المقترحة: {len(self.defense_measures)} استراتيجية

💡 الدروس المستفادة:
   ✅ أهمية التحديثات الأمنية الفورية
   ✅ ضرورة النسخ الاحتياطي المعزول
   ✅ تطبيق عزل الشبكات ومبدأ الصلاحيات الأدنى
   ✅ المراقبة المستمرة للأنشطة المشبوهة
   ✅ وجود خطة استجابة للحوادث مجربة

🔮 التأثير طويل المدى:
   • إعادة تعريف الحرب السيبرانية
   • أدرجت الحكومات الهجمات السيبرانية كتهديد وطني
   • زيادة الاستثمار في الأمن السيبراني
   • تطوير معايير دولية للأمن السيبراني

{'='*60}
🎓 هذا التقرير لأغراض تعليمية - مشروع أسرار المارد الرقمي
⚠️  المعرفة قوة - استخدمها للحماية وليس للتدمير
{'='*60}
"""
        print(report)
        
        # حفظ التقرير
        filename = f"notpetya_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        print(f"\n💾 {Colors.GREEN}تم حفظ التقرير: {filename}{Colors.END}")
        
        return report

def main():
    """🚀 الدالة الرئيسية"""
    print_banner()
    
    print(f"{Colors.YELLOW}⚠️  تحذير مهم:{Colors.END}")
    print(f"{Colors.RED}هذا السكريبت للأغراض التعليمية والبحثية فقط!")
    print(f"استخدام هذه المعرفة لأغراض ضارة جريمة يعاقب عليها القانون.{Colors.END}\n")
    
    input(f"{Colors.GREEN}اضغط Enter للمتابعة...{Colors.END}\n")
    
    # إنشاء المحاكي
    simulator = NotPetyaSimulator()
    
    # تنفيذ المراحل
    simulator.analyze_infection_vector()
    input(f"\n{Colors.CYAN}📍 اضغط Enter للانتقال للمرحلة التالية...{Colors.END}\n")
    
    simulator.simulate_attack_chain()
    input(f"\n{Colors.CYAN}📍 اضغط Enter للانتقال للمرحلة التالية...{Colors.END}\n")
    
    simulator.analyze_destruction_mechanism()
    input(f"\n{Colors.CYAN}📍 اضغط Enter للانتقال للمرحلة التالية...{Colors.END}\n")
    
    simulator.calculate_impact()
    input(f"\n{Colors.CYAN}📍 اضغط Enter للانتقال للمرحلة التالية...{Colors.END}\n")
    
    simulator.show_defense_strategies()
    input(f"\n{Colors.CYAN}📍 اضغط Enter للانتقال للمرحلة التالية...{Colors.END}\n")
    
    simulator.show_attribution_analysis()
    input(f"\n{Colors.CYAN}📍 اضغط Enter لإنشاء التقرير النهائي...{Colors.END}\n")
    
    report = simulator.generate_report()
    
    print(f"\n{Colors.GREEN}{Colors.BOLD}✨ اكتمل التحليل بنجاح! ✨{Colors.END}")
    print(f"\n{Colors.PURPLE}🎓 الفصل الثالث - NotPetya: الدمار الرقمي")
    print(f"   من كتاب: أسرار المارد الرقمي للأمن السيبراني")
    print(f"   المعرفة سلاح - استخدمها بحكمة! 🛡️{Colors.END}\n")
    
    print(f"{Colors.CYAN}{'─'*60}")
    print(f"💬 للمزيد من الفصول والمحتوى التعليمي:")
    print(f"   📧 تواصل مع فريق المشروع")
    print(f"   🌐 تابع التحديثات")
    print(f"   🤝 شارك معرفتك مع المجتمع")
    print(f"{'─'*60}{Colors.END}\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n\n{Colors.RED}⚠️  تم إيقاف البرنامج من قبل المستخدم{Colors.END}")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Colors.RED}❌ خطأ: {str(e)}{Colors.END}")
        sys.exit(1)
