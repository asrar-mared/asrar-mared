# .github/workflows/ci.yml
# ⚙️ Continuous Integration - أسرار المارد الرقمي للأمن السيبراني

name: ⚙️ CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
      - "hotfix/**"
      - "release/**"
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy after build?'
        required: false
        default: 'false'
        type: boolean
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# منع تشغيل متزامن للفرع نفسه
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  checks: write
  issues: write
  packages: write

env:
  NODE_VERSION: "20.x"
  PYTHON_VERSION: "3.11"
  GO_VERSION: "1.21"
  JAVA_VERSION: "17"

jobs:
  # ===================================
  # التحقق من التغييرات
  # ===================================
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      docker: ${{ steps.filter.outputs.docker }}
      docs: ${{ steps.filter.outputs.docs }}
      config: ${{ steps.filter.outputs.config }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔎 Detect file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'src/**/*.py'
              - 'requirements.txt'
              - 'setup.py'
            frontend:
              - 'src/**/*.{js,jsx,ts,tsx}'
              - 'package*.json'
              - 'webpack.config.*'
            docker:
              - 'Dockerfile'
              - 'docker-compose*.yml'
              - '.dockerignore'
            docs:
              - 'docs/**'
              - '*.md'
            config:
              - '.github/**'
              - '*.yml'
              - '*.yaml'
              - '*.json'

  # ===================================
  # Linting و Code Quality
  # ===================================
  code-quality:
    name: 🎨 Code Quality Check
    runs-on: ubuntu-latest
    needs: detect-changes
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        if: needs.detect-changes.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🐍 Setup Python
        if: needs.detect-changes.outputs.backend == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # JavaScript/TypeScript Linting
      - name: 📦 Install Node Dependencies
        if: needs.detect-changes.outputs.frontend == 'true'
        run: npm ci --prefer-offline

      - name: 🔍 ESLint
        if: needs.detect-changes.outputs.frontend == 'true'
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            npm run lint || npx eslint . --ext .js,.jsx,.ts,.tsx
          else
            echo "⚠️ No ESLint config found"
          fi
        continue-on-error: true

      - name: 🎨 Prettier Check
        if: needs.detect-changes.outputs.frontend == 'true'
        run: |
          if [ -f ".prettierrc" ]; then
            npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
          else
            echo "⚠️ No Prettier config found"
          fi
        continue-on-error: true

      - name: 🔬 TypeScript Check
        if: needs.detect-changes.outputs.frontend == 'true'
        run: |
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit
          else
            echo "⚠️ No TypeScript config found"
          fi
        continue-on-error: true

      # Python Linting
      - name: 📦 Install Python Dependencies
        if: needs.detect-changes.outputs.backend == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pylint mypy isort bandit

      - name: 🔍 Flake8
        if: needs.detect-changes.outputs.backend == 'true'
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: ⚫ Black Format Check
        if: needs.detect-changes.outputs.backend == 'true'
        run: black --check . || true
        continue-on-error: true

      - name: 🔬 Pylint
        if: needs.detect-changes.outputs.backend == 'true'
        run: |
          find . -name "*.py" -not -path "*/venv/*" | xargs pylint --exit-zero
        continue-on-error: true

      - name: 🔒 Bandit Security Check
        if: needs.detect-changes.outputs.backend == 'true'
        run: bandit -r . -f json -o bandit-report.json || true
        continue-on-error: true

      - name: 📤 Upload Lint Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: |
            bandit-report.json
            eslint-report.json
          retention-days: 7

  # ===================================
  # اختبارات Backend (Python)
  # ===================================
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, code-quality]
    if: needs.detect-changes.outputs.backend == 'true'
    timeout-minutes: 20
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest pytest-cov pytest-xdist

      - name: 🧪 Run Tests
        run: |
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --maxfail=1 -n auto
          else
            echo "⚠️ No tests directory found"
          fi

      - name: 📊 Upload Coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 7

  # ===================================
  # اختبارات Frontend (Node.js)
  # ===================================
  test-frontend:
    name: 🟢 Frontend Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, code-quality]
    if: needs.detect-changes.outputs.frontend == 'true'
    timeout-minutes: 20
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📊 Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline

      - name: 🧪 Run Tests
        run: |
          if grep -q "\"test\":" package.json; then
            npm test -- --coverage --maxWorkers=2 --passWithNoTests
          else
            echo "⚠️ No test script found"
          fi

      - name: 📊 Upload Coverage
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  # ===================================
  # البناء (Build)
  # ===================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: |
      always() &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')
    timeout-minutes: 30
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: windows-latest
            target: windows
          - os: macos-latest
            target: macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline

      - name: 🏗️ Build
        run: |
          if grep -q "\"build\":" package.json; then
            npm run build
          elif [ -f "webpack.config.js" ]; then
            npx webpack --mode production
          else
            echo "⚠️ No build script found"
          fi

      - name: 📊 Analyze Bundle Size
        if: matrix.target == 'linux'
        run: |
          if [ -d "dist" ] || [ -d "build" ]; then
            echo "📦 Bundle Size Analysis:"
            du -sh dist/ 2>/dev/null || du -sh build/ 2>/dev/null || echo "No build output"
          fi

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: |
            dist/
            build/
          retention-days: 7
          if-no-files-found: warn

  # ===================================
  # بناء Docker Image
  # ===================================
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.docker == 'true'
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===================================
  # E2E Tests (Playwright/Cypress)
  # ===================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        if: hashFiles('playwright.config.*') != ''
        run: npx playwright install --with-deps

      - name: 🧪 Run E2E Tests
        run: |
          if grep -q "\"test:e2e\":" package.json; then
            npm run test:e2e
          elif [ -f "playwright.config.js" ]; then
            npx playwright test
          else
            echo "⚠️ No E2E tests configured"
          fi
        continue-on-error: true

      - name: 📤 Upload E2E Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # ===================================
  # Performance Tests
  # ===================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: ⚡ Run Lighthouse
        run: |
          lhci autorun || echo "⚠️ Lighthouse CI not configured"
        continue-on-error: true

  # ===================================
  # تقرير CI النهائي
  # ===================================
  ci-report:
    name: 📊 CI Report
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - test-backend
      - test-frontend
      - build
      - docker-build
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📊 Generate CI Report
        run: |
          echo "# 🎯 تقرير التكامل المستمر" > ci-report.md
          echo "" >> ci-report.md
          echo "**التاريخ**: $(date '+%Y-%m-%d %H:%M:%S')" >> ci-report.md
          echo "**الفرع**: ${{ github.ref_name }}" >> ci-report.md
          echo "**Commit**: ${{ github.sha }}" >> ci-report.md
          echo "" >> ci-report.md
          
          echo "## 📋 نتائج الوظائف" >> ci-report.md
          echo "" >> ci-report.md
          echo "- 🎨 Code Quality: ${{ needs.code-quality.result }}" >> ci-report.md
          echo "- 🐍 Backend Tests: ${{ needs.test-backend.result }}" >> ci-report.md
          echo "- 🟢 Frontend Tests: ${{ needs.test-frontend.result }}" >> ci-report.md
          echo "- 🏗️ Build: ${{ needs.build.result }}" >> ci-report.md
          echo "- 🐳 Docker: ${{ needs.docker-build.result }}" >> ci-report.md
          
          cat ci-report.md

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ci-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: 📤 Upload CI Report
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: ci-report.md
          retention-days: 30

  # ===================================
  # النشر (Deploy)
  # ===================================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: ci-report
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true')
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://${{ github.event.inputs.environment || 'staging' }}.asrar-mared.com
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux
          path: ./build

      - name: 🚀 Deploy to ${{ github.event.inputs.environment || 'staging' }}
        run: |
          echo "🚀 Deploying to ${{ github.event.inputs.environment || 'staging' }}..."
          # أضف أوامر النشر هنا
          echo "✅ Deployment completed!"

      - name: 🔔 Deployment Notification
        run: |
          echo "✅ تم النشر بنجاح إلى ${{ github.event.inputs.environment || 'staging' }}"
